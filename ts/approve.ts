import { getFullnodeUrl, SuiClient } from "@mysten/sui.js/client";
import { TransactionBlock, TransactionObjectArgument } from "@mysten/sui.js/transactions"
import { fromB64 } from "@mysten/bcs";
import { Ed25519Keypair } from "@mysten/sui.js/keypairs/ed25519";
import * as fs from 'fs';
import dotenv from 'dotenv';
dotenv.config(); // This loads the environment variables from .env file

// you can find the raw private key in the file ~/.sui/sui_config/sui.keystore
// which is generated by the command `sui client new-address`
export const raw = fromB64(process.env.SUI_PRIVATE_KEY!); 
export const keypair = Ed25519Keypair.fromSecretKey(raw.slice(1));

const packageId = "0xfe235f5c25a65c019c008a2e6516788759fcd2790de5b9e0fe4b4e4f582911ae";

async function approve() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();        
        txb.moveCall({
          target: `${packageId}::kns::approve`,
          arguments: [
            txb.pure('0xdfa8714305b97a934488398181be58ccb069d511fcc72a6ab6c32f9282dbe27b'), //for testnet, //0x06efd9f7b51df7f0922c750a8cc7aa08ee4494d55ef5976096c50624455a78f7 for mainnet
            txb.pure.string('SWAP-00001'),
            txb.pure.string('data'),
          ],
        });

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'approve_log.txt');
        logToFile(JSON.stringify(created), 'approve_log.txt');
        logToFile(JSON.stringify(resp), 'approve_log.txt');    
}

function logToFile(message : string, filename = 'transaction_log.txt') {
    console.log(message);
    const formattedMessage = `${new Date().toISOString()}: ${message}\n`;
    fs.appendFileSync(filename, formattedMessage);
}

approve();
