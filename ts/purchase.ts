import { getFullnodeUrl, SuiClient } from "@mysten/sui.js/client";
import { TransactionBlock, TransactionObjectArgument } from "@mysten/sui.js/transactions"
import { fromB64 } from "@mysten/bcs";
import { Ed25519Keypair } from "@mysten/sui.js/keypairs/ed25519";
import * as fs from 'fs';
import dotenv from 'dotenv';
dotenv.config(); // This loads the environment variables from .env file

// you can find the raw private key in the file ~/.sui/sui_config/sui.keystore
// which is generated by the command `sui client new-address`
export const raw = fromB64(process.env.SUI_PRIVATE_KEY!); 
export const keypair = Ed25519Keypair.fromSecretKey(raw.slice(1));

const packageId = "0x103fa54eefaa6317f2b71b7a2c45d9d4979bb51d4ecdd5684fde46c8ee763df6";
const adminCapId = "0xd01c1b16e3ce55364ef97847f9d5ab31c2a83be01c0315dd04a3576e3643c93e";

async function purchase_sui() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();
        let coin = txb.splitCoins(txb.gas, [ 10_000_000 ]);
        
        txb.moveCall({
          target: '0x103fa54eefaa6317f2b71b7a2c45d9d4979bb51d4ecdd5684fde46c8ee763df6::kns::mint_to_sender_sui',
          arguments: [
            txb.pure('0xe563f31bde33f07be9de205d8c463c6e33b3b51c4ec238416b9dd91fcc0f075e'), //for testnet, //0x06efd9f7b51df7f0922c750a8cc7aa08ee4494d55ef5976096c50624455a78f7 for mainnet
            coin,
            txb.pure.string('+19995551000')
          ],
        });

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(created), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_sui_log.txt');    
}

async function purchase_kone() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();
        let coin = txb.splitCoins('0x942956f11d07e58a290c037143f6cd1447135cc40e7570247aa56ad9ad8889dd', [ 15_000_000 ]);
        txb.moveCall({
          target: '0x103fa54eefaa6317f2b71b7a2c45d9d4979bb51d4ecdd5684fde46c8ee763df6::kns::mint_to_sender_kone',
          arguments: [
            txb.pure('0xe563f31bde33f07be9de205d8c463c6e33b3b51c4ec238416b9dd91fcc0f075e'), //for testnet, //0x06efd9f7b51df7f0922c750a8cc7aa08ee4494d55ef5976096c50624455a78f7 for mainnet
            coin,
            txb.pure.string('+19995551001')
          ],
        });

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(created), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_sui_log.txt');    
}

async function purchase_nft() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();        
        txb.moveCall({
          target: '0x103fa54eefaa6317f2b71b7a2c45d9d4979bb51d4ecdd5684fde46c8ee763df6::kns::mint_to_sender_voucher',
          arguments: [
            txb.pure('0x6f7f4078f9da0fec4d330595441c3cc9258eb58c952c0f514eeb3a16e3f6c007'), //for testnet, //0x06efd9f7b51df7f0922c750a8cc7aa08ee4494d55ef5976096c50624455a78f7 for mainnet
            txb.pure.string('+19995551002')
          ],
        });

        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        const created = tx.objectChanges?.filter(change => change.type === "created") ?? [];
        logToFile(JSON.stringify(tx), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(created), 'purchase_sui_log.txt');
        logToFile(JSON.stringify(resp), 'purchase_sui_log.txt');        
}

function logToFile(message : string, filename = 'transaction_log.txt') {
    console.log(message);
    const formattedMessage = `${new Date().toISOString()}: ${message}\n`;
    fs.appendFileSync(filename, formattedMessage);
}

purchase_sui();
purchase_kone();
purchase_nft();