import { getFullnodeUrl, SuiClient } from "@mysten/sui.js/client";
import { TransactionBlock, TransactionObjectArgument } from "@mysten/sui.js/transactions"
import { fromB64 } from "@mysten/bcs";
import { Ed25519Keypair } from "@mysten/sui.js/keypairs/ed25519";
import * as fs from 'fs';
import dotenv from 'dotenv';
dotenv.config(); // This loads the environment variables from .env file

// you can find the raw private key in the file ~/.sui/sui_config/sui.keystore
// which is generated by the command `sui client new-address`
export const raw = fromB64(process.env.SUI_PRIVATE_KEY!); 
export const keypair = Ed25519Keypair.fromSecretKey(raw.slice(1));

const packageId = "0x695fa0bd4395696074c4b9e8d2122e40664c0a78842c356095ed28ccdc04a802";

async function setup_display_kyc() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();        
        let display = txb.moveCall({
          target: `${packageId}::kns::setup_display`,
          arguments: [
            txb.pure('0x52e1db881bdc1acd8df4711775c6752454e9d9560137383b0074556244055289'),
            txb.pure(["name","image_url","description","project_url","creator"]),
            txb.pure(["KYC Verification Certificate","https://kns-api.karrier.one/kyc/{id}.svg","The owner of this wallet has been verified by Karrier One.","https://karrier.one","Karrier One Team"]),
          ],
          typeArguments: [ '0x695fa0bd4395696074c4b9e8d2122e40664c0a78842c356095ed28ccdc04a802::kyc::Kyc' ]
        });
        txb.transferObjects([display], keypair.toSuiAddress());
        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        logToFile(JSON.stringify(tx), 'setup_display_kyc.txt');
        logToFile(JSON.stringify(resp), 'setup_display_kyc.txt');    
}

async function setup_display_kns() {
    const client = new SuiClient({url: getFullnodeUrl("testnet")});
    const txb = new TransactionBlock();        
        let display = txb.moveCall({
          target: `${packageId}::kns::setup_display`,
          arguments: [
            txb.pure('0x52e1db881bdc1acd8df4711775c6752454e9d9560137383b0074556244055289'),
            txb.pure(["name","image_url","description","project_url","creator"]),
            txb.pure(["Karrier Number System","https://kns-api.karrier.one/profile/{id}.svg","Cellular phone number verified by Karrier One.","https://karrier.one","Karrier One Team"]),
          ],
          typeArguments: [ '0x695fa0bd4395696074c4b9e8d2122e40664c0a78842c356095ed28ccdc04a802::kns::Kns' ]
        });
        txb.transferObjects([display], keypair.toSuiAddress());
        const tx = await client.signAndExecuteTransactionBlock({
            signer: keypair,
            transactionBlock: txb,
            options: {
                showObjectChanges: true,
            }        
        });
        const resp = await client.waitForTransactionBlock({
            digest: tx.digest,
        });
        logToFile(JSON.stringify(tx), 'setup_display_kns.txt');
        logToFile(JSON.stringify(resp), 'setup_display_kns.txt');    
}

function logToFile(message : string, filename = 'setup_display.txt') {
    console.log(message);
    const formattedMessage = `${new Date().toISOString()}: ${message}\n`;
    fs.appendFileSync(filename, formattedMessage);
}

//setup_display_kyc();
setup_display_kns();